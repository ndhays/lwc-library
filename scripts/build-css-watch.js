import fs from 'fs';
import { execSync } from 'child_process';

const WATCH_DIR = './src/modules/';
const OUTPUT_FILE = 'tailwind.css';



const tailwindComponent = (componentPath) => {
  const contentPath = componentPath + '/*.{html,js,ts}';
  const outputPath = componentPath + '/' + OUTPUT_FILE;
  execSync(`npx tailwindcss -c ./tailwind.config.js -i ./tailwind.css --content ${contentPath} -o ${outputPath}`);
  // remove tailwind base styles from CSS file
  const css = fs.readFileSync(outputPath, 'utf8');
  const newCss = css.split('\n');
  let lineNumber = newCss.length;
  while (lineNumber--) {
    if (newCss[lineNumber].match('backdrop-sepia')) {
      break;
    }
    lineNumber--;
  }
  newCss[0] = '/* Auto-generated by tailwind build script (yarn build:css) */';
  newCss.splice(0, lineNumber + 2);
  fs.writeFileSync(outputPath, newCss.join('\n'), 'utf8');
};

console.log('Watching for changes to LWC components...');

// watch for changes to LWC components
fs.watch(WATCH_DIR, { recursive: true }, (eventType, filename) => {
  if (filename) {
    const matcher = filename.match(/(.*)\/(.*)\/.*/);
    const namespace = matcher[1];
    const component = matcher[2];
    const changedDir = WATCH_DIR + namespace + '/' + component;
    
    // avoid circular overflow
    if (WATCH_DIR + filename === changedDir + '/' + OUTPUT_FILE) {
      return;
    }
    console.log(`${WATCH_DIR}${filename} (MODIFIED)`);
    tailwindComponent(changedDir);
  }
});